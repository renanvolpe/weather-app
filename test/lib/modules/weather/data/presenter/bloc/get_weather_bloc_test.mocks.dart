// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/lib/modules/weather/data/presenter/bloc/get_weather_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/modules/core/utils/failure.dart' as _i6;
import 'package:weather_app/modules/weather/data/model/weather_model/weather_model.dart'
    as _i7;
import 'package:weather_app/modules/weather/domain/abstract_respository/abstract_get_weather_repository.dart'
    as _i2;
import 'package:weather_app/modules/weather/domain/params/get_weather_params.dart'
    as _i8;
import 'package:weather_app/modules/weather/domain/usecase/get_weather_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIWeatherRepository_0 extends _i1.SmartFake
    implements _i2.IWeatherRepository {
  _FakeIWeatherRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherUseCase extends _i1.Mock implements _i4.GetWeatherUseCase {
  @override
  _i2.IWeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeIWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IWeatherRepository);

  @override
  set repository(_i2.IWeatherRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherModel>> call(
          _i8.GetWeatherParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherModel>>.value(
                _FakeEither_1<_i6.Failure, _i7.WeatherModel>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherModel>>.value(
                _FakeEither_1<_i6.Failure, _i7.WeatherModel>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.WeatherModel>>);
}
